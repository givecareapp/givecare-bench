[project]
name = "supportbench"
version = "0.1.0"
description = "AI Safety Benchmark for Persistent Caregiving Relationships"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Ali Madad", email = "ali@givecareapp.com"}
]
keywords = ["ai-safety", "caregiving", "crisis-detection", "benchmark", "evaluation", "mental-health"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    "pydantic>=2.0.0",
    "pyyaml>=6.0.0",
    "tqdm>=4.66.0",
    "anthropic>=0.23.0",
    "openai>=1.12.0",
    "huggingface-hub>=0.20.0",
    "datasets>=2.16.0",
]

[project.optional-dependencies]
analytics = [
    "numpy>=1.24.0",
    "pandas>=2.0.0",
]
visualization = [
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
]
all = [
    "supportbench[analytics,visualization,dev]",
]

[project.scripts]
supportbench = "benchmark.supportbench.yaml_cli:main"

[project.urls]
Homepage = "https://givecareapp.github.io/givecare-bench"
Repository = "https://github.com/givecareapp/givecare-bench"
Issues = "https://github.com/givecareapp/givecare-bench/issues"
Documentation = "https://github.com/givecareapp/givecare-bench/tree/main/docs"
Paper = "https://arxiv.org/abs/XXXX.XXXXX"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["benchmark/supportbench"]

[tool.pytest.ini_options]
testpaths = ["benchmark/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

[[tool.mypy.overrides]]
module = [
    "dataclasses_json.*",
    "yaml.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports
"tests/*" = ["B011"]  # assert false

[tool.uv.workspace]
members = [
    "res",
]
